%!PS-Adobe-3.0
%%Creator: groff version 1.22.3
%%CreationDate: Fri Jun  2 00:28:20 2017
%%Title: cmps112-2017q2-final.ps
%%BoundingBox: 0 0 612 792
%%Orientation: Portrait
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Times-Bold
%%+ font Times-Roman
%%+ font Times-BoldItalic
%%+ font Helvetica-Bold
%%+ font ZapfDingbats
%%+ font Symbol
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 3
%%+ font ILShakeFest
%%+ font Courier-Narrow-Bold
%%+ font Courier-Narrow
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 3
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-BoldItalic
%%IncludeResource: font Helvetica-Bold
%%IncludeResource: font ZapfDingbats
%%IncludeResource: font Symbol
%%IncludeResource: font Times-Italic
%%BeginResource: font ILShakeFest
%!PS-AdobeFont-1.0: ILShakeFest 1.000
%%CreationDate: Thu Mar 06 00:27:07 1997
%%VMusage: 1024 17316     
% Generated by Fontographer 3.5
% Copyright 1995 Illinois Shakespeare Festival**pguithe@oratmail.cfa.ilstu.edu**Generated by Fontographer 3.5
% ADL: 800 200 0
%%EndComments
FontDirectory/ILShakeFest known{/ILShakeFest findfont dup/UniqueID known{dup
/UniqueID get 4517803 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.000)readonly def
/Notice(Copyright 1995 Illinois Shakespeare Festival**pguithe@oratmail.cfa.ilstu.edu**Generated by Fontographer 3.5)readonly def
/FullName(ILShakeFest)readonly def
/FamilyName(ILShakeFest)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -133 def
/UnderlineThickness 20 def
end readonly def
/FontName /ILShakeFest def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/UniqueID 4517803 def
/FontBBox{-100 -557 1423 861}readonly def
currentdict end
currentfile eexec
d9d66f633b846a97b686a97e45a3d0aa0525392eecac163e584a9104d99ad0bc
1b1f3f7121d1d0f2c60dd206b0d3c8c450620b47320ca0aeb8937511e456aade
8e66b301b1e3e9dfe17e2f79ecfea709ff3dae19b4c169df6773eda414d02915
a6f0faf8b24fbb0777c697be8a37d63a390ad9dae495bb7e626721ff2fd3fb14
7c80d22beac37c2624d818d58c8df0209f5ce76acdde57a303d9042bf0a674d0
95697f925f532d1814bea8f8a5b1fd0737f362c88e00acaed0fbd2c1122c5c76
f746e52213db5fe46f968d1864897816d8f60c16b0f0e2a25ddb17684d7a04a3
29bf86fb2572c939d130ec9b8371d35b22d5cf9e33b4721bf68a5822b7350834
d371b927c556bdd515a596ffc92af48efc5091753fbc5aa4ec3994cc66a6c0a7
f01dd40ed52fa8d1380445e6b950e759f28df3dcd4edf28bcc0a357eaaab74a7
b341a6db6739bba4ee544bd767b4eb977767c0359c751d447726f12d63bf471c
16c6d13c7c41b135a3964e4d7a021629c5c78501bdc1733987a0dd050bb4ef19
5da90081ecc6040f29f6b68fa6549a6d42cc068a324ac11faab492e75f2e5da7
2fbfb81f124132ffe246f066292bf4ae6930848da88ad647c3b0f5d7b8d398ab
cd6b00aa7931ddbefecc901dba749ac708d38e7ca8ebd541aa9fbfddef1ff2ba
6d418c730629c21db4e0f65c836374b50ffd2810ca46a10bd728bf9e426a8d4e
8c60cdd9b0ced8e8d341a637637f19ffb7511de2a30b3f4686677f8cae48531f
89c05ca8e92dcd33c7dd73fbafad2a3ec4f348a0c85c943ea756d705d285b98a
e3062960717b6e3cbceef781522da7a34c70946e76d7cf66b864bf28b0e657e6
0d32481524ab290657d25871e3ff8ba39af92cd7dd55f1f20e7142f0c54e24b7
1c82212361760fa0a4f5cf1ffb7ddb109d6a9587cd6b0c5bf54a30d4e456ddd6
b355ede8df91058e7ab0598bf3f458a9d712b8bc5c091e34f9e75ec3ccaddfc1
8c036517987a8dd823096c2dd0928815ee6d17f25a1c0bf70e72eef781522da7
a34c74df1e3a885b74d5caf5bfa6fb3a3d1e240d02ada943740ce4c360e31f43
2ad104e1e588a4a96ed0b076f425675f75126f29691f447a5ce08c1f7c77d61a
6e12b185c5c76af927fac9ffa982c6dff5a2413631598808e0645c4ab7d1a151
b0df64751e4001f4f04c842a9d2d1bff0c486ae0f085a3305909ce313994f131
6f5c2a9b14f2361ea6d69b47685db176c930ffc36a52dbd8f12e6e303844b274
fe06fbadf8bb5ae485f52ad00ed5a1a0d3a18bb5e4115c16abdc910a31413771
9c31f5fa95b1deb83502067ac6cf5877a96a80e49c6995ea7d59db8208d3611b
cad70ea8ff8e144972ae22a7b46559b56534e32d3448b0620eae9a97eae6f38c
b7dd7de7f9f674618e66f79e7103af703cd920fa27acbb6d0acd293758895d61
d53927079539e501be09cd8314d50832e91d1d0fde043856215b035930f0ca9d
a63927a8931c5a8f24ce24a9a3d3b3f701db021fdcb9f77ca9660727ac18d680
28a9f918d9c96bd8715d02bd940e933435d44a107e66dc4899e14686868eb789
3b2cdc4b75e0517fb26bd16f66f11c8f27e64850af042f96810d916ba5aab30e
b66e3bb0a4b65199e84bbf096b19d2a69083a685aaae00b0b7eea1139b3d52ea
72254a36b3d991d2da45933d02a7680cb61546faad50b4ed05c07453e7e9edd9
6a9856df0c333e824c6cb68d7b32f82fe01721ae40fe1e1f113dd4256be68b0a
05eb55b9e3ec67a5f661bb00f1f29fc41eb0d868e2e470b11e7f8b94913a29a6
e40c6b454312b4f7872e7623a318e88dd7032e672878a3e269ac9d3e1633c040
45554f7cd51016b317e6f789048bc0b7918bcc4433ed8f84dd7b6fb92d3c2139
0f63a9d41b7530df48e69fa935095131fb7cf43c35c9186bf8490da0c23da20a
f361652c1ccfa4c6ee946150a8f312141b9aae050718cc68d04c727c8ae7e6ce
e1ef698499c1e7434b8b0746dd943a5917254ac993a9af084a8d82fc9b184f1b
dc01d8fb7df3330449aa480430dc2413053e2cc51ac930be5a3b7dde42aa8486
8e26dac820a5365e51bcc43d416664ccd4a11997a9fc420aadf157c51f47ef80
58c59d9afadd37188b2a0059464be8a196ac89067c81da1f31d3fa05b580ad88
bea71df0affdd622f9158c0d362a4d0f753a9d28b366aa3d3778e3cc4a8bcc86
6b2e4bc82e937fb4a3dde7bb9c404ea0710531444fb5e105e8ae46f4166b22c1
224943e5b9aaf24639c0417d7c3968c89ea69b3d320360c7c299b80ec54b325e
6acfa9d363da38fefcf3a311816fd7ad1961eb7741f480b1dcfe24c7ad3404da
325634e46fc042bce99add2a07bb0b1d481f3799efe241614c6c1dea67f8fc6f
a5c60756745535751cda1553ef6d987e7a9396f8083a59a3d814bb19e7a1d61e
0b290f4767cc57cd76ce564050c9e7741b1940abeb92209699e7b95b2a5b7231
443a4d734b4a530c627e26b06bcc2b0fa7e730e6aa8b9f4de393db2810c2362a
8410a9269fed139d3d728da2be4721c266223cd0ac5f97956abd1ac08541eee9
2c9f3018cb66c56b601e964bc3f9f3b42bbeadb243c26d4d08164816724dc332
12b1ab04255b06727f9ed0af0d6e19eaa0fb1913948a7d45b12d8e6e93075dd0
505e80a48d4190662cc6fa029ce7f17d55d909951a1f45d484250a9644c0aeb0
4bef56a2b8c1fba1028001c64fa73e0b7ee848823e2e89cb11ed62ff7a96a20f
feafda4efa49913d77225aeaa8c0569e158441b39365966232595d250622b03b
c7f49c4f22bed8b683441531b6dee9402311503f15804c8062d8a4c095993fc8
4b6765560de65a004d1ad187d3285ad3e5d97667dd3b53fe2285f66ff948f253
d2f5a9bef3acb6c4184e9d341a7a40a39fe5753abbe183dd25f6399d609abd45
b4d06b427a7e63afec54040464ddcf74824eb5a4384bc9d83fa2e38767a1980d
85632502ff2b24696ee9a778f61566f092988b333b236826075387e9941a3986
892e59d6f7e7feb0c0477da65bc815134a8c5c8b61633b06f6e3898357a21665
513cfc34bff089f2464576d8a1893918867af2c6518e02222886cc58790248e5
2a8a1cd92d74babb37693c13428ce0c91f7f771e4d7df356003555889e813e53
6fe356af6efdc40ca737ecf0b1ed957676abbe9df9750337d7be18c1273df832
25847931656898419ca04007469af9dda89052d9e252e3375a4993396e5ce8cf
b0a934116e0505be1f5126dec98eb8ecccc28c58e13e63d394ad29c5aec1b597
c0d934af3ee3fa4963520613c5ffc621a1c77b1ef46677c539588a5325988917
8593b63e97963a53887a1ff1cf54841ee275ad80132b882d413da087323793fb
49f920e678bfeb0c0c34e18c5e097e4ffdba2e54c16968d6b63dae8838819ed9
40e3b2713b947bfd2996c9da177b5ff81ead18dabb74c7a56735a70351de1712
990ef6205209a05d9427fbab4cc9fdbea836b3179698194e59e03edcaba54500
69a1a22ecf2f274acd2df79ecfa253f1ec9f6682643c799062d979c99c60f082
fcd4fe046473d8e8d2744efe51763af5b10db6a9dcb0d779077051228a51aaaf
fcc4daa20fd48167726340781fa17e448f093230fbd1d9fbfba420d9690519e0
41f38c138658043190d2486fffbbad2ca7d64f7018280cf9f130e322ba23c69b
f062ed38742f6e656126366f36bf0591890738e69bd2deb77f295067247ed6cb
ba6e9baa21f1126ebc59cc33202cecdfbd1ff8136024bf181d81b8c5c974cee6
cbdd753d5f4c27dd58d07a6f4eb0a29893d23a22dbf0d84697f7629f39b7f3cf
aac45274c4d0fcc8d9678fd32e60a5d7148c62ce438bbc19a355be7d578c9eae
798e9610b58b92e0c6a18981df865725ea8d2985af7b9f929d4931855b983350
43aacb7b8a34d7ae5c2170fa2b502b521b01725c8f1dfc62540863366acb7d5b
4bb4719a6bf4b9e48485b7e6715bed79480c23d4b1016ac988d95b8ac35c27ea
596bba99d57618ec28ad56cea5182414d9d886a2a468424b22e9323ce37a620a
a3540f8070e655ee2bca109e5c0ddd3d3e579aec17236648d0e219bfd0996ee0
027fed3fff4df2cab23620f600cf08ab3018a8f5c32cb9ea0fcb0900a28b2f71
ecc9895e82785541c421829521c5b5e26f4773b85c4915e4313e61c5d0f4f328
79998139188bb52adadb5c215b332ef59dc8682895d977a923de6936ec14f548
f8bca537625f16388dbcf92f5d34279b673b1e8d3b343871aa68281a6b5a119f
198a996e0af6b8fc472a9b2d71a1fe5717dce2cae823d9fd0110f3048c525664
562779c1c568dc383e7192b00aceccf42293060784b26f22b9293214e69a74ff
cb021b724a6ffef6b8a8198f630fdd04bb1401d755045cc443907366a8eb9fe9
78764a4a5c4821f5efacfa14ad8b3fd7eda3826da52122130ae7b572a5fe3e91
4de83a923309e28c879e40ad74579ea9a3e0cf36915661d4cbaaa613787a46ad
d87a1d1761813da88818fd4e2d76ede05804b4ec3f28e367e9a4628e3a93b03f
7a87c0e99c67f84537a4b1fb0bb2f62867cb497fc9ac833c50ae450efccb6e23
9e29dc2d70511254c00ac5b0ea2f99ead8b8ed1236080d8bb3a0f4489fc1b798
62fb41197991d478f27c9a1e51138eb92ab10264efb092ad44ed9093553309e2
2963e70b29ca91e26f9f456317cd4051ba906d1458ec5870125f107a76f7dcee
7e6cdf35c35243f5bff191b04e3ab504fd09eee9c862de86204d1fe50ec18be9
087b72e0a46be2e82e0a41d140669f3228a9e442c1df0cb6e70158132553fb52
55a12bd4f4bde8d64a4889bd1c579482855c5781c1b740a87061d1de65798888
d7a0180fe000fc74c14e50d379c4eef0a93c6e42ea8965a5b12384f9420d1337
6c8c0405d06cf3bda9c344d9bf13957bd352837cf64319b1657e7eeac1ffa95b
b94b73cb71f7f5b78c3f5b6cbfc7cea99384a9fb5f46ebb8af45387c1358e008
81ccde24a1569b9520673bb5e31831d2d81177a5057cf4fe063660b8d44fb86d
d2e8d4eb211ce98e3b46844aea26e2dad6243c4eaf1ef7b066d0498208b96006
0281191e1bdbe89403fad6db07e0c6702ee79fb02338d6e6b06b7aa50e02b95c
ae406e9b9c7a69d80ff897a152bd2d8e9e86c0eb075243d14b473281330fa604
d7e8f41535b37a490f51ffb284379b13d4a60874e30065730819c7668198316b
311f64bec90172385439e8983cde2290548bcae131d37c955c2bfbedf870aa3e
0acf6d361ab5898d5fa44f08b4172556a86402fb493939ab6d22b4ac97bdf7dc
e80bf04257a817cc120eccbdc37f618d6cad66dc3ca9b1dea750aa68d0dcba6c
ed1601759cfcf6d3b8b5e1290e0c7f748fc4239a3593e7511adb2d407f61c22e
42c81817d5c396e450e71d950ced2e0ce5455005c81e248b885bd64cf7d27871
c04519503fba765efbafba79a8c3303b5cd87012ed16edb572323fbb65bbeb5a
a7d8e72f0d0c28f047ae48b7a3819a912a65ee98eec4ca794c0a8ed6384b8217
17022936760ab79905e2479e7126ac1fbc35e20d755ab1b62e7baf6133f895a8
d44ced750b2c7b6a696dbdb023d8ab078efbcbe7d15c791a904bce11165df2b7
b34a343481958c5c661547b2927afe8f469b67aacca3ad314107b0bee685902c
a1c388a9f1d18bf9ec3ae9d7d15c30f7a60fe7748e216c35f1c7974a209de1a8
6af83827485e578cd5b5a3e14cc6dc3b999723aa05505670ebc3a5d8219eee0f
61743c0252b06f0d6846c92263ed1499d0ba51b33c3bc2885abdd605c8708c6c
a6ddc12553a27b24123b20165bf154f30966cd8fb44d06b0098cf92f2cb33a63
f58f04d696bb59c4fb9b00a12ac7e79d1ccadcbf05cf8a3ea77c66aab9fb120a
3f44eb7cace5fdba6e73a7b8317f1aa7fdec3b5c2febf221cae9fa99dc84f52f
64dce60a56144699afd69f57cfc32cc916aabd6d7990f7d5ae5af4aa14d6a965
53e4f8fc2e4bc719f2fe73e8d2fefed6c6aaaf28287a09fe9947d5daee96dd0e
1ab1aa3d1104fa2ddebb332fccee3ee0e24ab4604e9d1c76b0688b7bbbab23e5
f0ec72f507ee1d9cbc6e78386375886e2e74d69f3d01145a3e8c355cb47f2fa7
a0fa4b76f7a3b577106bb303695be2ae30da83850ba906700f0eb6d813075d71
76a1da12c5f1a54d2a5ece24c4b5d695889a1c9e78f1ee744482b565230120a8
92a94f55eb30b6f1b42ad85f9014166d1e1a7697caa7ca70cc5827fe83ddb946
c1f0bdbfd87deccd64c67d83e2d9d9b3b4bc8c7d0880d5e519baa647e750ca48
e224c43520c9a6e33944179bd4dc0fae228b215b666191c3783e3b5072d3d709
475d44ba257dc549dca0cacf211cf88641e6067234e91c9a6b5af3d1131850cd
6f23062a6137017ee2d5d7f01df78dcaf4e8a4d7645e277a2109a0ac1c480670
91308cf085028db0a509ed5bc62522ff3d7ca2ba29b539dec8ca7f5a1cea6885
7e2f2fa41fce0db43a5142977f8985afd3b237662174df41d10957c7a9add68f
e5e37c4de7f7b42f547f0e8db0b7cdeaa16d237d6f93e5d15da68d5c081711d0
6fd333ed34e58bf6cebe3f90d47b9eacac8caf30f46b31f0303f06ed66b057ae
9d9c27bec2c9d109ea1ede005b50d0a0347fef023b8140f0115ef2acb0740625
fa5c886842b231c9f79ea026baee46204b191c58780a65ac4df1c7f13dfba281
dd7d080b54dd9b4361dc333e07ba32ff0b20239863e2aff32bceaf1dc6093d0b
9d3d0a8e659ff71583c9cda0f8f77bd120b05d31f1ddc5839aef62f3831055f4
b74c3d91a8bf0f2bb0c02b27bed40d3ff32df9f41b94408c4bb0d63dc584bfe5
f7ea7494ea2d58f7c36a35866307dbab59c1684d4d265cf9f97fb624c96f37a4
5505d22b7ca14fcf8a22b03ef693751a598265c50ebaca593db55372f27d1db6
51bc79093e03e582c9f54d67171b0038e3203883bcde9fe1d5af242edef3b0fd
1a5eb13cc9f2968b358a70e64da78e4b2d01bd351dd880752cae413863f79bae
83ab14f922f4fcc4f2df5c5b0b498204a16f61d15a1bf31151c82f899739ee0e
9cdc349a3428c47555ea19976c49a6324975a3c0bd6124e5da923cbfd861384a
d3997dbdaa65c847683ced025ee28b82e276a70c9f9ec6043154c51337166ad4
f299e29f6da38eab0092c64a6f4ce745f1cf786d9d0fb75864ba6b47b09131be
a2d78385f8027b6a53760d2b0aeb69cd4c4db258d2cf07b11d61f90cdee8ad60
5d63978dc400fcca5ea4c4a297e4782b90371fc409f0736f99dab0676c6592e5
b1e40e64079516af1e21465eeef156f76c87a80f5eef464362a40001ddbab146
1fe3f71a2a7ef16cc4ffd751ad16140e8cb9ce7524b22c7d8d53157369fda178
5886a4303012ec8e9b3d9445103e9316da8e034d861fd119a565c059ca4176a9
eed4434a39a16f49e69f935883aff5af1a2f6dd4c2ce2a702d6fb7f3e8e4880b
40415b55fe93f8bf4e82c6e76ec8eecfd29da7fc1e96275cb902141e63c42fb0
ae263a63de180a562af48443bd2f57aaafd525596c83219cdbeda0cc023f4a8c
25188edbfe643d31d1f09ff0e1c3dfa9009d06c87edc285c8b0a29e3a43003d2
a1bfd383b89ff65123a7acdc2f48041977b7411c84dd7d3c10de66c32c51fc0c
6915845f4d022e6712d3bea91f2c0468cafa35bcdf7eaffcd28b2589c4b83f21
e2f8259192b697a72546ef4c682c82a7c88c48e2bfa1945cba92be2f492aafe1
c95738bd2525ae5a1e99b19cdd00aca080a939e0e685ce4210461cb9c4ddde13
72b67be8e754e7a8b3fd0037efe8db4de1099e2c6a408dec1e952fde0c203e80
36ff768a1137fef271c5d868548a929763618818e550f5b08a346044f3bbd328
bb2d64f04cf01e8156a54968aa441fa80d894494db638470c2730878f5aa708a
b8fd1c31c4f577666975ace26da230bb5c375d6708d92855648eed95b2ec23b4
21fefaeefa625870ce32d3559078a7dbe0b9f2115b3d816f089bee9935e4a314
34f142d798abe0a28c3f80aec4664fcdf5eff6f065bfc1dcb656fb7c50b4bba6
c807485e04ea897fd902c68f49b78d278d8dcf14336b53b4ecf73918333fa084
c92f2bd5f7e8b004cea554a02c2372155a0d0ab739f6aca506793aa23ac239cf
1ce0a581e40959f1eb0a31fd32264bac5d69a9962c4142907ed089fac52ee757
438deb07f64fbdfa23d32d8c336f19e58099da12d2ee4d3f86b2043f7546f004
0b78f3891a0e82db31c64211d81da5b588fe2179708ad513ebeb3c421c395b97
644442e2e1ac91aa6a557a8d3dc4c43c8d5fbf2c9f86bcf9783c81fd2834bf10
2bdb40b8f6e91d3858425ddedcea35891d6c70a846314aff2afe27bde8972c5e
cd1f07394d371eca5727922d9bedb5574de4969fb5131d9101e0207c689af058
a7f22bfb60aa63f4c21fd3398d74323747838c80a4a61fd6c1bb66a68850f052
cab5430c668ce876430bf43fdda8f5f6cc381218bed00a5e2b6b8ecbcf0f8ffc
b2aabc00f12aec416201d6fce738c941e1c76f7b93ff157d74c47e261e4bb4d1
74b607e111b358e0f6ba1633b3c91c632080f04049c20d85f51e35045d717d7d
5a52d2433427cf2ee61943d373ea9b57aa2d2c0d9f63c27ec6ef4207299611b7
84ad9ae80acb3196b4ab600ca3e5d4aedcfb37058c2a5c1a1a5a0970f0fb6192
7b9ec7cc383d7120b4982dc8f0a1d6d04d5aefe35650e8e337d7329d196d90a4
ed0b1e88a9e7e14fab64a616087b99704040bccb61491d6a902ce5b9db1a142d
452b2af991515464a38cfb2bf6990de788bb2aaddbb4de2fc2c735cce5b82535
c183c65d54f2770875c5819c4dc5eaa9b1f9ebd25375b0ae4eefef183f906e40
0ac640c31cf5ab4f6a12994af5d3ab3be78f2c6535a3d9914147c4ee670a3672
3122b848a0ccd588fc7c7345f7c80b4121d458027bb5edccdb400d0ed406fdc3
0a11aa8da20108646c6a1622e530f8c412ddad74f62e4a38030938623596d3ce
80e1a404c907da084bd6210f62f0474b6d072b809cbfff66312a14ef05500e1c
0db023440b97f8ae2ffe8a7a4f2d8239ce44fa5726d1ffee7090341e81e998bb
126b3c8a9480613d740ac3e868620b711e44ee4c8d22f031805e115ca6274d2b
19d647731494c1b0607a283d6436b5c953dc353fd8e5da39ab4f95a3e1938cc1
dffc2e8a58966593c72ce2ce65a25f04cf646d56f56a1f69696d4126dd9ee606
48487a5d3a494dca540e4e4c63a7048e26e995c563e1f4b6144e71577b20f45a
6057080704653062178ec0b94a52c841b78f729a3f672777f9420ce09a583ac6
b7e19485d1d79c5cdc8d729fd023e379985ade71c229034395efd831850cbcfb
4da907baa957d4b9f178658d8f66b933d8146c9cbce2def26e67d3a0a2477b77
470c2801f0408034aff7b532647689f1f293b656e8e860818d4b215e7f43ff4d
8d4653794d248c916ee30a0001ce716c63d6b9c2bf3e226c4215b31615747c2e
8a496a6f150ffaa11c558471c59e52615516f76f1591fddab6b026bd7c8b2e7e
8188f926d88e730d2a96529fda5a33228f5bb8cae4cde9da0a914d090e63726f
08d808796c332358a4fc6bdb87b6418c3b33d938954a3ab2ff8d275545756ce3
7805676a5e185e4f8f7a89b5abbb3638b7425cdcb8d06b5cf5cd8b5cd440a3cd
b4bbe797516ad57f4f0d043e7a5b5bf2da5bd91a49348b92fee723b3a0774665
ab09b7c5a81d084b6d0bb2f25c1793f43b67cf732505adb7375d79de0d953fe8
2302b6af48606de5575034da1e229729fcd7261fce97f4f59784b93b024aa800
682180db608c9382e33bcee6c93b9ad9270b1235575ac45d3697d9fda58590ea
6343d2d5f95100426422713922678889458cb06d7ddceb723b4eaba696a1ad24
40f836edd1861dd9aecbd081779074688ba970050b425ceb75bbed2214dc55c8
58095bfbe8d36cee22ece615904be1c869eee394d45df3d2da212d67eb229aec
97ad44188b50a5a3d35f3e1b4ea0aabc9807038259bc75541b43086bec9ceb02
399f9563d71d8c276cb77dda390012629e993b996dc8c3404a649a2a56938844
596bcd1d74784d2e478dc83113163fb2349004685a6e02184f048d6c848eefdf
364d1e16306392e7f8734c7573b0b3b5414163acb11546a922e77773cccd2a5d
3f96a81ec8f3f63f676dc277fe96f7171eedece278fadd8d5f2872a04e1c655c
099aef2417f4752f0f85411253a23cf450530331525cf9b2c103f0d8a9715099
d436ad395c83cc1f12d0486cf3be2f2736126253cdbc92326562f4aae3cad97b
7805daaa0131ee464981bf3f60f892745cf0bb12c08831d1fd0e2ab69b56b669
644ef4ab14beb09812ac46d9dba5c9ca1b26446a784ca8d6798c27167c0f108b
29deb256bd5b44d6609cb95cb6b6b6fcc9ea5e1bf6328925092e81e5958ff266
602c6e35d9b94d292977fdcedaf7a5208aece9a2744a24accb3d94132de2fd99
296583f0470506df5249cb7fd4ac44bc18f7a2723c31b75dadddf665dbc28850
b6cdcf07c73d6895c8d88af83d32c8b74d3a245f42ed4aa351c81f5dd275703d
e1cd9d67290ab102f3f52f9201524cd594ecec6e48838020c26a70ec1bfb43ca
d4bd09751f0591f3e3d545de50e6462c3c461e151c9e1c05480d3862e40b1cbc
0022342aba8d5e09acf88aa35f5530b72dfa1c507a856489b8ef28324756bc56
274f15f2cf89dbd9953e3c7b79adc67a12efdeaa16597e0264a77688ece96a0a
c619d8b6f98a1f83fae6093442ed9256084b327d9fd4cc1540b8417a7872629f
1699f76d9cb31ac3cb0c3488dc42b74bde9a475621596fb65f41405cd76b7d22
162a7b8634785ea5d370816a94491ed8973a2c08e52b7425b1e7585ab2626c22
c8bcfb70a8a42572fdbf8fa0871f2dce49f20771b873f081f7a81a260fd44337
3c8f50b87201d427375601b7e7e1db8c5c1729625dd5cd31a57d6183b5e7e4b4
4fd2eed56afe1adc1e8ac5bbb7bb97192b5ea5284f78022bf9e27d5d573a5f44
3917bbd6544599eea259d5768771ee8ac181c25a3e853fd51ca5d48c751f9b99
e759f059ba1f9102d5a1341276e55ce1a73b1a301258e1723935cbf50eb381f1
86d4e2240a4eef00db8df658d78806219b7db3acf4c3fec6e589cd55d33a5dda
8c30284b62c7fa1171067fa880b9a7db204333a3e674a8fc4eb35f84401f07fb
725fece99b486813f9d996a996907c5736f9f84230325bb327607844f49f7ec7
b3ca6c6501631507ed406c30dcdfe0d683478a3c996dfa541d5df59c08c524d4
49237c9e49e2af4a3275f3c90cb03efebf590377677a9dae86bc976f09b9b303
539517de7b5930dca343a8ed684635f43a2d81b9575c603142483eb2a280163c
8e94810ebc9c75d951e4a7219b0d630d35d6010a5624e7f4bb595fb0c51a94b0
0f2a6e280225ff7ee5c88e0a1b71a57bba2b65874a25a69228a61dd1218bb91a
36be9fb8006b58116ee4ae4688422eab18d698dd390bce1352d86e45c1b82266
c047db54d36e3f1b569162d13d4194cd8c5d66ce41126fba8af7d64fa4c54dcc
6e38c7d374179e17238c085749eaab352f30194e379f3af01526470a63079235
c60e9e0d28f0425a6d3bb36bc458574e41bc9b390da018941e1326b2353e041d
18009fe07c41048d668038897fe3206903f7610fe784ab95db71c927dc9cd2bf
6d7872084a84bf0b194f67b404b288bd1e43bb72c530d25127debf13dcdb8628
ab0fe97b9185dd3053f58f57e9174f218362534756d1c73dc64c377c0c2fd1a1
bc91bd20315399dd40c8a83738271b76ca3515d56b903650e4d02029406a9660
c81cbcd1cd65f95fde357cce28cfad5da1361a1ca2faa2b4756d9beb56b5fea9
66571e6af823335360d4599cd3e7f429a20558a64cd2b0b9104cccc99b668398
ac278097c54429afd696c6402bbed2c2844bf28a2215cf07cb79a7ddadcd0eb3
077c185e50c4d9f10b8de45cd1c82e05315ac0b494b93494abd711e2e54026bf
6bcae4db4c867bc3326fdffe823d77c54bc162b1e20a266d982b7f23e4af909d
548e31f27ac99d5e484317ff7184eb868c4987222adbf80d09bc7c8ebc8d6fed
2d84e702906548b6ebfc9ed16eea4fbf3abae4b00ab3f39230fb22d13f77591a
01fd387c5f3622215ac0277ef21748b27057ad67441a7133a35b376772228c0c
22b5b32b6a5bd35efff7d40fc93024cd5ef447ec0be5411d9290404e3cfa865b
f870515060ba5173eb21888cad660a8672514c3357104034ba7f77fa96c0cbdb
66c816465f50faa41683526b7f4c6e179da515441c05cb4cbb0accc8e88461bd
2e92df091bfdf109ca4583f729fe2f40f16784b77d21d53fa8caa81019423b12
ba80eabefa65347de4189f51f375b727852d65611ae5831175da7f1781344dad
ea1b52b2c214606e6a3a32ab76654ac2ac6c70daae59efecd37b30f56b1fd5d6
724b401eb1647ede516bb5ebca58294731d07aa764499e2596129f87d96ee4bb
7fe05c209cb7d9ec21d2b61087f6ce45b26cee4f17aaef29b1e8469d81cb96e8
7b313b988d5082edaed8cfe8ae288518ae5488fcdf0d83e6c79d77af754e6b2a
d55d3f95de2f6f5b6a7ca1641b91e506eb856d03db34a47fffce28d81ba4cbb0
281be6c71360c23caae8a03aa0965216b0d45045c374ab8c44d51d7d505ddb73
8d2f7c2b82160ed434a2342b82d4a22b5f2f57171f8c050b36158ac4051fcb3b
6d0c05f98ce9eeef401f7acdc7e753be491beb1d1dd7b6b7bc2a6ab38f3e54c9
d03f42349b013c0878c752dc8a7508ba46ee2db75667e9154a0022b354571f0d
2c96ec84adde56137b399e5c03fcb0414b26c7b9e08585ea1afea7c383bed412
108bd5a87708c987d6e96da279b762bc306cde6108a870e9c32d69ca31a57f93
3901d3ca18ba4c23600be44cc8873070f8206f65c04e58f42a22eb343fb84231
6caea52d6510b7cbc848f20e6cf1ba68ef8d854e4d2014bef00efdc6b6f946e4
c75f5e8ca35daec59ba7ec20af68fe90b758b40f3409b1c5fb05fcf71aaeccec
3359cc73e2c535ed50191e069025052c99b5b56e2be7a3f6c4a6c1e89e1e9b1b
0508a146184fe25731dcac8ee5d22ce0355efe08b39995b809e358dd98f800a1
df11b60bbd3a8e233dbb8ccddcbcb213f270aa7ec73a69d8ccf2f2d6da68ca2d
e6b5d5acd0d178c288bb42c1b6181a45f21979cdf82e2d618064c2d1a5ed760c
60123b8ccbe3a7a03383af928296ec35ea3254b2609f36909898fa21651ae088
87b0da54bc80f500fb95d04f42bef8b69b1ba990c65c9c19c43fb191f0d4bee2
8249981f93dde5e45ebd75105a4ae370d76e9bed74f0085ed11605af8575ccf6
a8a50efaeb367eb7ea0fdc2f71504b4c30dba8a70ea8ba9055293b5878339fae
ccb821efb5bc170f968019f724fb98606a9bb63851e5e818543f37634fb879a7
55d6e0594f2eb6ca685378f4c7845462e92491c60fa94607c41a851bb51c6353
8c5cc41d6964ac48dff4ff601a5e7d9d130ca1236e94868ee4550560675989da
4caad1ff8ca62fb792e47f11916e951ac82cabff9e49a8f766bcf33784042881
5a111660269e75801e768f3d867a7fc6595c034a813f7c992b0f1ffd7723d1e3
e58c9dd0a94847b551ce06ce483ea93a1f4d48ae108178d821d421e7aaf934dd
9b636afc1397597fc5fc1e585ad8b0425cbf054de194a54c1c0c795130821359
7ba3f10b953df8bcbc5531df503b5258847f00bbc834d93d43d75aeb8df77a4a
1c1b0800ff83f5907001043a2ecefeb072702dab7e64c5ad2cdb414a7cd0deaf
e71b8b2c419d909d762834db3b6fc6666ba2cfb000d4f039ecd9884ac58c0e47
256f9e2074badb8f1d83a5fd36e6a78d9bb6477544925872f12517254311f9d1
31530d36b578478ce7c00489068d8db687bdd61155cf8aeb6a9d4a54cc8b87c7
640f9f91778be9dfa9dc2718bd27ceb2ef47d416f459a9236c2dcec56266505a
1c77259c45ec415ed6be9355a705d46ddf41b8290f7ecfcd460aa15777bf3b9c
bbb817a8b5cc8ff52406423771d6312092a4ae8c10ef6ac1bae3e20449069c72
31c05f591bcbd9e02625da15bc3b9708004f6d2a826e3f27aaaf15f14eafd02e
5d045f5024ac1462690fced2d0ff82850ea1f892c6d874c58ad1b024e208fcd3
0936e7a8308f6dc2ad289cb29b306b98124ace6bd875cf9367cb92ef115afa42
11f3d943bfdcea1ba91292fc5881f89b9537441492dc0351f17f6c6c18a5446d
85412ddd80c1b9b4cf567df3a108f6807e34785ff3b83b2039e21f30d0a5cea5
19fed657209e9b17904fe6635ff9cae80fe860ff71031e18912a3e67fdb07337
3c62cd2e8599f3b671c54b294523306037cbec243fd620451ae2b966df71c1b3
ca7f12f623955defc3cbcd137f51ccfaf3cd604da4c5f171c81feb51220c68fa
488f7402defbe1940aff8e345a4a0e39901c9af2a26ab33c39281f85604b97d7
9ec448661e7fc0fe2b97089388ce8819c246cdfdd774754d3b9dc3de4fedac39
97951d60833c2e8c5611d892a74a1754b2ffebd2a8368f6c7d30f62fb5239764
f945281128f6e7eb6c9d34f5662f97bdc23f79fddbe7f6c5a6ce915a4e4e0260
17896cf38b10994174e2ac41e9d73a0d5c0dc677392ce975f5fd9fcd72029a50
1f005b03bc89820507df45bc4b9d0d734dd8d2c037b5c1a32661391c24a1f5df
9459584f42c1c7b05e23d53fad1d1ff4f28fa73e36e662d4256992266f83736e
5aaa9d8ecbaa2eb9a919be6ecdd0d663a51b1dd249fe32c537d25ac9d5a85b2b
09d58579b43a3086df71ec37ba20e096051852d8ee21f8cd688fbd6a5a8d761c
c2a2a83157378fe5ca9d10043e8e02c51c1432e1369441601b06bf5dea9d552b
40f8dca2f938a58e7224476c36006b4cb28f1b235b7f9dfc4087adde40c05b21
b3cf22ca2673ce1b385280e3c30df4719bfeb21105040a563f8dde1813a84e32
6e6641eab6479a34d865f625e0db90a5849bad085d008c6b53d0dbc2e2051caf
0a89723b5031130627bda34f16efe09ef3066c3e71cf190ea52f56a2d578a5d3
63f9ee1f6db704009188488cc4f313b0a57a315be4faf7d40ac3511a36907356
98a5190b84ca562cc5044e0fbb0fe6690b99e8903b0033ea9b4880a20864cc80
ee3088fb5037b9e65819fa71d16433d93f21e5bad04a6745278164695d3b1cd1
9b128899c2deae5f5e0f1d61392fead99c9940cfb197785b593bab34af73ca72
c9eb2c7fafabd4f08a52e8b32f22c13dc388dde960001192a8b5ebd69e504679
3aa600218be32cae5767fe06aac6c364f60cbd9baec950055384e4ce3b94a0c0
8ce8fcb9d01f0ccc90a876f169023ce3288fb59b5103f2bbbc0606598b6a7e8a
79c268a99572d96280c1ec76d9782bc2a062cadfea67150a966205e285a02560
17a5933626e3c7ae6c58e9a08509d405f0171dd3089a9be318cdf03729f3f3d6
12a007581ccf8281a9825856dbf4b1dffbfc88d58046933b8aec96b9257eff72
2509ca25794eb69795cf8c7c332f473be4dd47c9a01bb7431282b465b53d49e1
b59565bc571982ea6f0ab9d6ae5527a94acbcec9d99e9cfc43e371d11af7833c
d5ca59ce9e4df2b230d3511e4d3023e442f6b8ef92cd77d763a28a5402df324e
9473489b28892522d37445d15ad32a20b2672b1f63df50e4ad899e0709783808
3f69c2b1f3183b121c6d2d38f8e5fb8536230fa414f1e09f0fb8445d3b312511
689036235c37e4c9fcb42fee493607b6af2a4236b3f149e1aabdf0272dab393a
262fd17f661673a244cfa287987715e010dc214e9f692c69e2af7f618e11381f
39bee4f70c0b63ce47d406b45b933534c0b4c59cfec1c064775ec5943503e87e
33cefa06073aef85c92deb5f48a9a2df5b7543dc466cc107ac4485d276e90994
74a557f09fef8c451609042d5dfc49a28531a89ec51dcbb6296961ff193aaf5e
37bb647366f1c233869873367d1f5fe6fe81ff75caad0fa73aad6f40d8b89301
18a3872ef410a26acfafa9bdca75cf3d8f4e3520e83c68ecc5ae13d50d92d0a1
32d74abafab02aa31f662fbd4afcba3483657fccd997c07a6b5ab3ac79055a14
e1a22faef70107007c14487119192fc9364b7400dc8dffbf279983b033b632f1
a5bc3ca6f10d4010da867a45936bcc983729c52bc05a2fd876385f4e66f3309a
2233e630ad811bd192253a1b3e441d4e9d0fa444ef30099f5a631a770c3e6492
99a0b15f40e34233a1a2dde5454c7121dd62b297916da59b1fdc11c4e5989c61
6fc0666397c6b68cd598e59c6d842e761f19fbb6c334a2463abaf35b5faa2960
6dd6cd74493a16c46784a13f968c97726866d4ad50a455543a5c9b30cfe85fc1
edf44440dd818314ab3bccdfb2b32c0bd7e0937eea03c18845e2905e6b7d6675
887eecad161cdaad2ea29a89364b0f553fd39af6400cda295bb3c51530096193
1dda281de69a01fbae876a6446d229293b7640d60044342f9ce211272b6fea88
fef9c0cfb596f434e0cc0f7ce9d2d5d2ab4f36c925c47be66c0c1c79958203f5
1c12ed12b32ace3ea47c3e32d9ca4e40a64878edf499107fb92ea5531780927b
2d4001de59528aba38fc97ef493d62a3a5ba02d1e1b2327ea4e5316a7884a845
8c7e726d8661a081f0414aab9ed00acd577c21432c81d8f0eb0d94112ad55bfc
58c9d26867dfe8ab56c32d0a82d7da8df01585976331a399de0927f35a3fa34b
4edc7e8e5ad48f6836cefc76a88f31df1a7de182623abe93804979d7807a3ed7
236da86a3ba2163fadc0104ffc0c2f60668f59a82e7b5acf1f12329c89691a95
71fc618a2c93aa56945a96c08f1b7ac34b74048541866785b6e15328bed535c8
7ca062dbab9713d290831a36563a701b1c016b04917dc1ac8130a6fabefebe3c
b68e1bbbd8c2250cae13a33a712472329c9f906a0cd97980af839e8f90f07190
5688d0f5ec3d6638bca37198429cbb123c2d94062489d10d9c55959210051168
878238176f632f645d634ac7d1ae95c6dd1c2768c4d98fb06ddb88c09dfa7121
d66d65896fbf547ad0ac4e9a07ad742569576871835777aedbfd10b298704a89
53ac31573acf50ba3a57227ce9c4eaf7236294d1bb6d2d458ff955550eeb550f
fa8b5158465cc896f958381ca0f66530ccd4304d8ed3c363563127f58fac1115
aff937d0ce621c06efb3324dcc5824a40504d518f1209b1489e5ec0574b6f109
ccb962eeabaae2a460a6451aa47ed4df556475318dda35cc62224467e6a1d145
f057bc83a875a39bf8fe5bf97556d8501f3a3005fb6af714a768d2c3a8dabe88
23b18304178f2cb2e9e055b89e7b44d60ee1ae46779168c816a8712803f01e41
6df88a7e27e9952c542c6f5d9651900d9ec67ab42e7bd586f8695544713cecb2
5d9b1b174c554972419457a9c9af0f4b7abf4b71facba2b1270ce56c6213ffb5
54b2460400b94ea6865e4e21b4b8770ec4bbdf133608ed7a1656ed057d8aa0c4
073e8ceb6f483ac0d51bf824d86cc2a818f92ec19b3222acf7d016dc44640456
c46f377011038858e9b235528660a3b5a5d54cf657cad68bca8a56b2bbcbfcf6
ddbd69123a8d668051a8fd6efddb56ef89dae174319cf24d17fa164992299072
b0077b4ef2f890abc71143780aef065fc3bc8cb5599a30f001cb716e87dbdc03
85d2603ea049477f0361ba7cc49092893656ea8fce8009d30dfe8315fb6c1525
e797500946a433a53bdec06b91083340c1823d733021c601a861bfb760067654
10561c7f89b640393e91b1e449eb578d0d72daaf1228c39f4a82e0f9422fab7c
3dbb611c9b382c37ddbab8d41902fc5e90538ca72ac94500345abe2e937a4f3b
34ee5d3bee726771b0bcb6afdde554c994ebf88678794f2f2fa8696d1b39cc9e
ad93d363c3011da7c7c37a55097174008157c1cf68746aa6b3597103faa7cfda
2176e6f72250fb3991d07209155557a69d56da08b920edea8b7c80eeb40bcc91
ec6f9cd84d5960344b68688d4335e72913322a558db6d9f55de147a3d6add9de
c74336b65702d09b35b54b92fa590ca96e86e4326dd20159d8f48c5fe6209d00
385adbb9860168bb75957f2ead57fc11e2f7907b9626ca97d05b7859be5c7f21
ee7a72745ecc603c267653a4d75384dd2ee409e8a3eb8fbeece8747e6e655156
2ee99d92ec6fa3b51503ef9b103d367ffdef3e2470a06c3a5a733bab4bae847f
612cc951d74d647d3426ced4a346a0d5796bbcaffb680b0a79af686cf4ebd830
46bd49d4f85d136ff11919934e56780cb2d8e5776082590e248bdad96e4f9447
4cd11fb68390cc0e2a89b81c03210a4ad2e7606131bad72ebfe48b6de70da110
ada3ff7f7994202b85b0a8747d40c10038b2446ee8a9db8fd8ffe5cf4ccbb91e
4e65f1d7bab7f42e9fb2c33855b18dd1b9ed3fe36c98e431ed970ac8e7017a00
99a41c1e2546478d2bf5fe82b615f29c8ceeb4d8e9b860bef7288c203fee3329
92ec28f2d03c56c7afeaa1abd9bf655fae8cfc96e6d581708d21a662677beeaf
9919a86ecd2d6ff20b19d9dc98dbbadc85eb7340e00039ae9f78fc89ce167caa
bf31c37d9ac1e1ada89220eb8e91360243dd9d950a06bdc4c04a59128afcf382
9c35d2ad0563805095c3e100565269617cda583dd3dbde9e404dae97d7998e40
70e06a4abdc927b689b7383944824ff55a7f5c6a8e96b820b3334b1e6825e64e
d8866ae655f02aaef8663ce613a7a16def55d69dc9212141aae8d1fe5e193c05
ae15e06cb4a0f1f92151d96bb3eba03e0cd5db94582d4a8b68dfe4002f338414
ee113d9c058fe1dd4ad95c1ca00dd2b777c13defab9bf449467b3d0907315ce9
7a8c018d0da6a8fa71b95031a594c8be28f017895b247cf04a189af0c2910de9
c9dff48ef3f36e08dda1c4a75887e99820422e5437413d00e5e4d908cff98414
cc53a968763aaebf3ca5b637b7bb540eb93abe734095e08543307686ff7682bf
180b832ded1d0e3a65857e2b9b7d581090880ff050dced78f83bc7c9e9c01ff6
705d08a4ae22b79ca5c0c23002d033ad04799eb9f1bae1661dc7f708b7143fb0
df280db433c3fa36c05d5e97514792fa25a628910f59f927ce4613627c42880a
f0e3e72454b86b0187db113dccee4378d5bd1398e815141b932a45de32607397
4b76451de60d1b13e3f5c7f340b95f78d78d795c7e96c49ae74cfd503f2e3d65
4a3f63c358c8e94b6b1a848036d0da9fe8dc6d4fc3bfe5e6b6b99eb3268d08d5
be88a7663c56a43c05c470f49ba716cb58fbdd29097c7b1c2348079453def6f3
822b7699182baae302b50c2ee9f90999ab911c1161d206c4b22458f598566258
7336dd1716f9d7f798b2245abe42aa96ccfe1cb53805dfcd9744350bf5d12c6b
0a0e2fbd107cb9c1f2b607e0eb8e47a2b44c9362c9b228a1b0ddbd7907da6f8e
a680cebfcb225addd78e99b709ac2bbb4c6769bf3eba32b7b71655ad06b8d9f4
ff52f1c4490f917420e1a5147277e9eb247cd1205cce71771fbf1bec7d7b7142
977a3ea87181da3c83b833a30c9771e389991365c241c723f36132d19ebfcc72
782a4aed9bd6c93006c96ca2b0b8d63189ba4e78fc509381507a0be1b4763523
427aeff0ea4e790a79d8ad672366086b2e961793e8b5afbc73b4de7ad284e637
7f9dee151ec941723804b743afdb0d90e9c96a624ea7e266d65195538dabf7be
5117b67adcf5f6e7d4cf172546a55c14a68e2e16b9accafc6803724104911409
beb230cde4fde5e35ad45640a94949463e5a31221225bc90325d3a827e3bd732
40595f40bfe8971227498fe4006d2ff5f1ce4e8772deada57c5c246afea7ae3a
cfcedf90bb13bfd2b15b4fe2488bd6d82769aa19524ffe737b2e0bd27c0d6d80
5584d374e8451f148c6af5f3f3627a611e7aa1bf4cdb9c544eb02965ee17bb3e
32f81ea59ef580d762110b1ad2221263de01a9e614fc88e4d112cad2878a33cf
a9a3f3642249a667836ad5c380cac6d44c229456ebcc49129da39dff951ffd05
eebe8ed3c020251c89d16a0ba7c0f8a3420586cde737834c3b62523f7ed076f2
e9a93c75650d9e0fce9013e74293991b8bb6f46d6ea959fd5c760b3700469131
1f28ab4638e72c725c21d41741d3a4122782a53d32eaf687263c9d64915c4eac
98951406eda2b6ab134aabc1fecc892a5f6adec55d259f8b46e145d45479c19b
af411cbc466f15121dcf5b0716619b97b047b9a6b30ae008a8b89f88bf5d2cf8
d9381bcd172719380957c306d7c5c348d0dd260ee6cb9273e49a6062bf9fbda8
63810a2bd1ced10eff967d39af7638f1159e2d7d073d0e2fb5541b57778e802b
4f95d3b639904a611c367964c625ed1b2b9b4f245447ec481f12b1741f1d356d
409094d2485e8fa97bbc561b8018abc6ebafdbfe3a21ad8d2617be540f670bf0
09cb3967c3bf6d6a7c2e0fceb7f0765ce524b0e46f3f05c781073e388fc32c10
1561de75d649363d3e48ce2de605f15761e143e21c253293bff1a611c27a4cb0
f093672e248ba1037723fe6d0667ffe036
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
cleartomark{restore}if
%%EndResource
%%BeginResource: font Courier-Narrow-Bold
%!PS-Adobe-3.0 Resource-Font
%%DocumentNeededResources: font Courier-Bold
/MakeTransformedFont{
findfont dup maxlength dict begin
{
exch dup dup/FID ne exch/UniqueID ne and{
exch def
}{
pop pop
}ifelse
}forall
/FontBBox
currentdict/FontBBox get
4 array copy def
FontBBox aload pop
4 index transform 4 2 roll
4 index transform 4 2 roll
FontBBox astore pop
FontMatrix exch matrix concatmatrix
/FontMatrix exch def
dup/FontName exch def
currentdict end
definefont pop
}bind def
/Courier-Narrow-Bold
[ .75 0 0 1 0 0 ]
/Courier-Bold
MakeTransformedFont
%%EndResource
%%BeginResource: font Courier-Narrow
%!PS-Adobe-3.0 Resource-Font
%%DocumentNeededResources: font Courier
/MakeTransformedFont{
findfont dup maxlength dict begin
{
exch dup dup/FID ne exch/UniqueID ne and{
exch def
}{
pop pop
}ifelse
}forall
/FontBBox
currentdict/FontBBox get
4 array copy def
FontBBox aload pop
4 index transform 4 2 roll
4 index transform 4 2 roll
FontBBox astore pop
FontMatrix exch matrix concatmatrix
/FontMatrix exch def
dup/FontName exch def
currentdict end
definefont pop
}bind def
/Courier-Narrow
[ .75 0 0 1 0 0 ]
/Courier
MakeTransformedFont
%%EndResource
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/ILShakeFest@0 ENC0/ILShakeFest RE
/Helvetica-Bold@0 ENC0/Helvetica-Bold RE/Courier-Narrow-Bold@0 ENC0
/Courier-Narrow-Bold RE/Times-BoldItalic@0 ENC0/Times-BoldItalic RE
/Courier-Narrow@0 ENC0/Courier-Narrow RE/Times-Roman@0 ENC0/Times-Roman
RE/Times-Bold@0 ENC0/Times-Bold RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
.4 LW 540 52 72 52 DL 540 54 72 54 DL/F0 10/Times-Bold@0 SF
(CMPS-112 \203 Pr)72 48 Q
(ogramming Languages \203 Spring 2017 \203 Final Exam)-.18 E/F1 10
/Times-Roman@0 SF 2.5(1o)162.95 G 2.5(f5)-2.5 G/F2 9/Courier-Narrow@0 SF
($Id: cmps112-2017q2-final.mm,v 1.173 2017-06-01 17:28:20-07 - - $)72 63
Q 43.2 43.2 93.6 106.6 DE ST F1(page 1)80.41 81.2 Q 43.2 43.2 136.8
106.6 DE ST(page 2)123.61 81.2 Q 43.2 43.2 180 106.6 DE ST(page 3)166.81
81.2 Q 43.2 43.2 223.2 106.6 DE ST(page 4)210.01 81.2 Q 43.2 43.2 266.4
106.6 DE ST(page 5)253.21 81.2 Q 540 106.6 MT 0 -21.6 RL -180 0 RL 0
21.6 RL CL ST/F3 10/Times-BoldItalic@0 SF(Please print clearly)365 81.2
Q(:)1.666 E F0 -.834(Name :)365 102.8 R 540 128.2 MT 0 -21.6 RL -180 0
RL 0 21.6 RL CL ST -.834(Login :)365 124.4 R/F4 10/Courier-Narrow@0 SF
(@ucsc.edu)495 124.4 Q 66.24 43.2 324 106.6 DE 2 LW ST F1 -.8(To)305.789
81.2 S -.834(tal / 54).8 F F3 .111(No books)72 152.2 R 5.111(;N)1.666 G
2.611(oc)-5.111 G -.834(alculator ;)-2.611 F .11(No computer)5.111 F
5.11(;N)1.666 G 2.61(oe)-5.11 G -.834(mail ;)-2.61 F .11(No internet)
5.11 F 5.11(;N)1.666 G 2.61(on)-5.11 G -.834(otes ;)-2.61 F .11
(No phone.)5.11 F .11(Do your scratc)5.11 F 2.61(hw)-.1 G(ork)-2.76 E
.495(elsewhere and enter only your \214nal answ)72 164.2 R .495
(er into the spaces pro)-.1 F 2.995(vided. P)-.15 F .496
(oints will be deducted f)-.55 F .496(or messy answ)-.1 F(ers.)-.1 E
(Unreadable answ)72 176.2 Q(ers will be presumed incorrect.)-.1 E F1(1.)
74.5 194.2 Q F3(Prolog.)5 E F1(De\214ne some f)5 E(acts called)-.1 E/F5
10/Courier-Narrow-Bold@0 SF(edge)2.5 E F1(that will represent the follo)
2.5 E(wing undirected graph.)-.25 E/F6 10/Helvetica-Bold@0 SF([1)5 E/F7
10/ZapfDingbats SF(4)A F6(])A F1(De\214ne a predicate)87 206.2 Q F5
(adjacent)2.5 E F1(which is true if tw)2.5 E 2.5(on)-.1 G
(odes are adjacent to each other)-2.5 E(.)-.55 E F6([1)5 E F7(4)A F6(])A
93.012 218.176 6.012 DC .4 LW ST F1(1)90.476 220.376 Q 123.036 218.176
6.012 DC ST(2)120.5 220.376 Q 93.012 248.2 6.012 DC ST(3)90.476 250.4 Q
123.036 248.2 6.012 DC ST(4)120.5 250.4 Q 152.988 218.176 6.012 DC ST(5)
150.524 220.376 Q 117.024 218.176 99.024 218.176 DL 92.976 242.224
92.976 224.224 DL 117.024 248.2 99.024 248.2 DL 146.976 218.176 128.976
218.176 DL 97.224 243.952 118.752 222.424 DL(2.)74.5 278.176 Q F3
(Ocaml.)5 E F1(Gi)5 E -.15(ve)-.25 G 2.5(nt).15 G(he function at the le\
ft, \214ll in the types of each of the identi\214ers in the table at th\
e right.)-2.5 E F6([2)5 E F7(4)A F6(])A 538 288.676 274.5 288.676 DL F5
(fib)282 298.176 Q 538 302.676 274.5 302.676 DL(fib')282 312.176 Q 538
316.676 274.5 316.676 DL(n)282 326.176 Q 538 330.676 274.5 330.676 DL(m)
282 340.176 Q 538 344.676 274.5 344.676 DL(a)282 354.176 Q 538 358.676
274.5 358.676 DL(b)282 368.176 Q 538 372.676 274.5 372.676 DL(-)282
382.176 Q 538 386.676 274.5 386.676 DL(+)282 396.176 Q 538 400.676 274.5
400.676 DL(=)282 410.176 Q 538 414.676 274.5 414.676 DL(<)282 424.176 Q
538 428.676 274.5 428.676 DL 10.5(failwith string)282 438.176 R(-> 'a)
4.5 E 538 442.676 274.5 442.676 DL(let fib n =)87 298.176 Q
(let rec fib' m a b =)105 310.176 Q(if m = 0)123 322.176 Q(then a)123
334.176 Q(else fib' \(m - 1\) b \(a + b\))123 346.176 Q 4.5(in if)105
358.176 R 4.5(n<0)4.5 G(then failwith "fac n when n < 0")123 370.176 Q
(else fib' n 0 1)123 382.176 Q(;;)87 394.176 Q 538 288.676 538 442.676
DL 325.5 288.676 325.5 442.676 DL 274.5 288.676 274.5 442.676 DL F1(3.)
74.5 458.176 Q F3(Ocaml.)5 E F1 .344(De\214ne the functions)5.344 F F5
(car)2.844 E F1(and)2.844 E F5(cdr)2.844 E F1 5.344(.U)C(se)-5.344 E F5
(failwith)2.844 E F1 .343(\(see abo)2.844 F -.15(ve)-.15 G 2.843(\)f).15
G .343(or an inappropriate ar)-2.843 F 2.843(gument. Do)-.18 F .343
(not use)2.843 F F5(List.hd)87 470.176 Q F1(and)2.5 E F5(List.tl)2.5 E
F1(.)A F6([2)5 E F7(4)A F6(])A F1(State the types of these tw)15 E 2.5
(of)-.1 G(unctions.)-2.5 E F6([1)5 E F7(4)A F6(])A F1(4.)74.5 536.176 Q
F3(Prolog.)5 E F1(De\214ne)5 E F5(sum)2.5 E F1(.)A F6([1)5 E F7(4)A F6
(])A F1(De\214ne)15 E F5(length)2.5 E F1(.)A F6([1)5 E F7(4)A F6(])A F4
4.5(|?)87 554.176 S(-)-4.5 E F5(sum\([],X\).)4.5 E F4 4.5(X=0)87 566.176
S 4.5(|?)87 578.176 S(-)-4.5 E F5(sum\([1,2,3,4],X\).)4.5 E F4 4.5(X=1)
87 590.176 S(0)-4.5 E 4.5(|?)201 554.176 S(-)-4.5 E F5(length\([],X\).)
4.5 E F4 4.5(X=0)201 566.176 S 4.5(|?)201 578.176 S(-)-4.5 E F5
(length\([1,2,3,4],X\).)4.5 E F4 4.5(X=4)201 590.176 S F1(5.)74.5
620.176 Q F3(Sc)5 E(heme.)-.1 E F1(Dra)6.109 E 3.609(wap)-.15 G 1.109
(icture of the follo)-3.609 F 1.109(wing list structure.)-.25 F 1.11
(Write a number in the car of the cell if it contains a)6.109 F(number)
87 632.176 Q 5.685(.D)-.55 G(ra)-5.685 E 3.185(wa)-.15 G 3.185(nd)-3.185
G -.25(ow)-3.185 G(nw).25 E .685(ard arro)-.1 F 3.185(wf)-.25 G .685
(rom the car of the cell if it is a pointer)-3.185 F 5.684(.D)-.55 G(ra)
-5.684 E 3.184(wah)-.15 G .684(orizontal arro)-3.184 F 3.184(wp)-.25 G
(ointing)-3.184 E .409(right in the cdr of an)87 644.176 R 2.909(yc)-.15
G .409(ell in the list.)-2.909 F .41(Write the Greek letter)5.409 F/F8
10/Symbol SF(j)2.91 E F1 .41(to represent a null pointer in the cdr)2.91
F 5.41(.A)-.55 G .41(ll cells at)-5.41 F
(the same depth should be on the same horizontal line of your diagram.)
87 656.176 Q F6([1)5 E F7(4)A F6(])A F5(\(1 2 \(3 4\) \(\(5\) 6\) 7\))87
668.176 Q 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
.4 LW 540 52 72 52 DL 540 54 72 54 DL/F0 10/Times-Bold@0 SF
(CMPS-112 \203 Pr)72 48 Q
(ogramming Languages \203 Spring 2017 \203 Final Exam)-.18 E/F1 10
/Times-Roman@0 SF 2.5(2o)162.95 G 2.5(f5)-2.5 G 2.5(6. F)74.5 70 R 1.577
(or each language described here, \214ll in the name of the language.)
-.15 F 1.577(Choose from among the follo)6.577 F 1.577(wing lan-)-.25 F
-.834(guages :)87 82 R .04(Algol 60, A)5.04 F .04
(WK, Bash, Basic, BCPL, C, C++, COBOL, F)-.9 F .04(orth, FOR)-.15 F .041
(TRAN, Hask)-.6 F .041(ell, Intercal, Ja)-.1 F -.25(va)-.2 G 2.541(,L)
.25 G(isp,)-2.541 E .089(ML, OCaml, P)87 94 R .089
(ascal, Perl, PL/I, Prolog, Simula 67, Smalltalk.)-.15 F -.834
(Grading :)5.088 F .088(deduct \275 point for each wrong or miss-)5.088
F(ing answer)87 106 Q 2.5(,b)-.4 G(ut do not score less than 0.)-2.7 E
/F2 10/Helvetica-Bold@0 SF([2)5 E/F3 10/ZapfDingbats SF(4)A F2(])A 536
116.5 87 116.5 DL F1(Bjarne Stroustrup')231 126 Q 2.5(sm)-.55 G
(ost noted contrib)-2.5 E(ution to language design.)-.2 E 536 130.5 87
130.5 DL
(Business data processing language, designers included Grace Hopper)231
140 Q(.)-.55 E 536 144.5 87 144.5 DL(List processing language with)231
154 Q/F4 12/Times-Bold@0 SF(L)2.5 1 M F1(ots of)-1 I F4(I)2.5 1 M F1
(diotic)-1 I F4(S)2.5 1 M F1(illy)-1 I F4(P)2.5 1 M F1(arentheses.)-1 I
536 158.5 87 158.5 DL(Numeric and scienti\214c computation language de)
231 168 Q -.15(ve)-.25 G(loped at IBM \(1957\).).15 E 536 172.5 87 172.5
DL(Simulation language that in\215uenced the design of C++.)231 182 Q
536 186.5 87 186.5 DL
(Small language for structured programming designed by Niklaus W)231 196
Q(irth.)-.4 E 536 200.5 87 200.5 DL/F5 10/ILShakeFest@0 SF(In)92 210 Q
-.49(te)-.49 G -1.66 -1.34(rc a)-.32 H(l).41 E F1<88>2.5 -1.2 M -.15(Pa)
231 210 S(rody language with the).15 E/F6 10/Courier-Narrow-Bold@0 SF -2
(come from)2.5 F F1(,)A F6(maybe)2.5 E F1 2.5(,a)C(nd)-2.5 E F6(forget)
2.5 E F1(control structures.)2.5 E 536 214.5 87 214.5 DL 536 116.5 536
214.5 DL 87 116.5 87 214.5 DL 223.5 116.5 223.5 214.5 DL/F7 8
/Times-Roman@0 SF<88>91 223.4 Q/F8 8/Times-Italic@0 SF(Lasciate o)2 1 M
(gni sper)-.08 E(anza, voi c)-.12 E(h'entr)-.12 E(ate)-.12 E(.)-.12 E F1
(7.)74.5 242.4 Q/F9 10/Times-BoldItalic@0 SF(Smalltalk.)5 E F1 .758
(Extend class)5.758 F F6(Array)3.258 E F1 .758(with the message)3.258 F
F6(max)3.258 E F1 .758(which returns the maximum element in the array)
3.258 F 5.759(.R)-.65 G(eturn)-5.759 E F6(nil)87 254.4 Q F1
(if the array has no elements.)2.5 E F2([4)5 E F3(4)A F2(])A/F10 10
/Courier-Narrow@0 SF(st>)87 266.4 Q F6 4.5(a:)4.5 G 4.5(=#)-4.5 G
(\(3 1 4 1 5 9 2 6 5 3 5\).)-4.5 E F10(\(3 1 4 1 5 9 2 6 5 3 5 \))87
278.4 Q(st>)87 290.4 Q F6 4.5(am)4.5 G(ax.)-4.5 E F10(9)87 302.4 Q(st>)
87 314.4 Q F6(#\(333 9999 88 47\) max.)4.5 E F10(9999)87 326.4 Q(st>)87
338.4 Q F6 4.5(z:)4.5 G 4.5(=A)-4.5 G(rray new.)-4.5 E F10(\(\))87 350.4
Q(st>)87 362.4 Q F6 4.5(zs)4.5 G(ize.)-4.5 E F10(0)87 374.4 Q(st>)87
386.4 Q F6 4.5(zm)4.5 G(ax.)-4.5 E F10(nil)87 398.4 Q F1(8.)74.5 446.4 Q
F9(Sc)5 E(heme.)-.1 E F1 -.4(Wi)5.338 G .338
(thout using a higher order function, de\214ne).4 F F6(reverse)2.838 E
F1 .338(to re)2.838 F -.15(ve)-.25 G .338(rse a list.).15 F .337
(Use tail recursion and a nested)5.338 F(helper function.)87 458.4 Q F2
([2)5 E F3(4)A F2(])A F6(>)87 470.4 Q F10(\(reverse '\(1 2 3 4 5\)\))4.5
E F6(\(5 4 3 2 1\))87 482.4 Q(>)87 494.4 Q F10(\(reverse '\(\)\))4.5 E
F6(\(\))87 506.4 Q F1(9.)74.5 554.4 Q F9(Ocaml.)5 E F1
(De\214ne the functions)5 E F6(sum)2.5 E F1(and)2.5 E F6(length)2.5 E F1
(by \214lling in the blanks.)2.5 E F2([2)5 E F3(4)A F2(])A F10(#)87
566.4 Q F6(List.fold_left;;)4.5 E F10 4.5(-:\()87 578.4 S
('a -> 'b -> 'a\) -> 'a -> 'b list -> 'a = <fun>)-4.5 E(#)87 614.4 Q F6
(let sum = List.fold_left)4.5 E 213.5 614.4 208.5 614.4 DL 216.5 614.4
211.5 614.4 DL 221.5 614.4 216.5 614.4 DL 226.5 614.4 221.5 614.4 DL
231.5 614.4 226.5 614.4 DL 236.5 614.4 231.5 614.4 DL 241.5 614.4 236.5
614.4 DL 246.5 614.4 241.5 614.4 DL 251.5 614.4 246.5 614.4 DL 256.5
614.4 251.5 614.4 DL 261.5 614.4 256.5 614.4 DL 266.5 614.4 261.5 614.4
DL 271.5 614.4 266.5 614.4 DL 276.5 614.4 271.5 614.4 DL 281.5 614.4
276.5 614.4 DL 286.5 614.4 281.5 614.4 DL 291.5 614.4 286.5 614.4 DL
296.5 614.4 291.5 614.4 DL 301.5 614.4 296.5 614.4 DL 306.5 614.4 301.5
614.4 DL 311.5 614.4 306.5 614.4 DL 316.5 614.4 311.5 614.4 DL 321.5
614.4 316.5 614.4 DL 326.5 614.4 321.5 614.4 DL 331.5 614.4 326.5 614.4
DL 336.5 614.4 331.5 614.4 DL 341.5 614.4 336.5 614.4 DL 346.5 614.4
341.5 614.4 DL 351.5 614.4 346.5 614.4 DL 356.5 614.4 351.5 614.4 DL
361.5 614.4 356.5 614.4 DL 366.5 614.4 361.5 614.4 DL 371.5 614.4 366.5
614.4 DL 376.5 614.4 371.5 614.4 DL 381.5 614.4 376.5 614.4 DL 386.5
614.4 381.5 614.4 DL 391.5 614.4 386.5 614.4 DL 396.5 614.4 391.5 614.4
DL 401.5 614.4 396.5 614.4 DL 406.5 614.4 401.5 614.4 DL 411.5 614.4
406.5 614.4 DL 416.5 614.4 411.5 614.4 DL 421.5 614.4 416.5 614.4 DL
426.5 614.4 421.5 614.4 DL 431.5 614.4 426.5 614.4 DL 436.5 614.4 431.5
614.4 DL 441.5 614.4 436.5 614.4 DL 446.5 614.4 441.5 614.4 DL 451.5
614.4 446.5 614.4 DL 456.5 614.4 451.5 614.4 DL 461.5 614.4 456.5 614.4
DL 466.5 614.4 461.5 614.4 DL 471.5 614.4 466.5 614.4 DL 476.5 614.4
471.5 614.4 DL 481.5 614.4 476.5 614.4 DL 486.5 614.4 481.5 614.4 DL
491.5 614.4 486.5 614.4 DL 496.5 614.4 491.5 614.4 DL(;;)496.5 614.4 Q
F10(val sum : int list -> int = <fun>)87 626.4 Q(#)87 638.4 Q F6
(sum [1;2;3;4;5];;)4.5 E F10 4.5(-:i)87 650.4 S(nt = 15)-4.5 E(#)87
686.4 Q F6(let length = List.fold_left)4.5 E 227 686.4 222 686.4 DL 230
686.4 225 686.4 DL 235 686.4 230 686.4 DL 240 686.4 235 686.4 DL 245
686.4 240 686.4 DL 250 686.4 245 686.4 DL 255 686.4 250 686.4 DL 260
686.4 255 686.4 DL 265 686.4 260 686.4 DL 270 686.4 265 686.4 DL 275
686.4 270 686.4 DL 280 686.4 275 686.4 DL 285 686.4 280 686.4 DL 290
686.4 285 686.4 DL 295 686.4 290 686.4 DL 300 686.4 295 686.4 DL 305
686.4 300 686.4 DL 310 686.4 305 686.4 DL 315 686.4 310 686.4 DL 320
686.4 315 686.4 DL 325 686.4 320 686.4 DL 330 686.4 325 686.4 DL 335
686.4 330 686.4 DL 340 686.4 335 686.4 DL 345 686.4 340 686.4 DL 350
686.4 345 686.4 DL 355 686.4 350 686.4 DL 360 686.4 355 686.4 DL 365
686.4 360 686.4 DL 370 686.4 365 686.4 DL 375 686.4 370 686.4 DL 380
686.4 375 686.4 DL 385 686.4 380 686.4 DL 390 686.4 385 686.4 DL 395
686.4 390 686.4 DL 400 686.4 395 686.4 DL 405 686.4 400 686.4 DL 410
686.4 405 686.4 DL 415 686.4 410 686.4 DL 420 686.4 415 686.4 DL 425
686.4 420 686.4 DL 430 686.4 425 686.4 DL 435 686.4 430 686.4 DL 440
686.4 435 686.4 DL 445 686.4 440 686.4 DL 450 686.4 445 686.4 DL 455
686.4 450 686.4 DL 460 686.4 455 686.4 DL 465 686.4 460 686.4 DL 470
686.4 465 686.4 DL 475 686.4 470 686.4 DL 480 686.4 475 686.4 DL 485
686.4 480 686.4 DL 490 686.4 485 686.4 DL 495 686.4 490 686.4 DL 500
686.4 495 686.4 DL 505 686.4 500 686.4 DL 510 686.4 505 686.4 DL(;;)510
686.4 Q F10(val length : '_a list -> int = <fun>)87 698.4 Q(#)87 710.4 Q
F6(length [1;2;3;4;5];;)4.5 E F10 4.5(-:i)87 722.4 S(nt = 5)-4.5 E 0 Cg
EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
.4 LW 540 52 72 52 DL 540 54 72 54 DL/F0 10/Times-Bold@0 SF
(CMPS-112 \203 Pr)72 48 Q
(ogramming Languages \203 Spring 2017 \203 Final Exam)-.18 E/F1 10
/Times-Roman@0 SF 2.5(3o)162.95 G 2.5(f5)-2.5 G(10.)72 70 Q/F2 10
/Times-BoldItalic@0 SF(Ocaml.)2.5 E F1(De\214ne the function)5 E/F3 10
/Courier-Narrow-Bold@0 SF(twice)2.5 E F1
(which applies a function to its ar)2.5 E(gument twice.)-.18 E/F4 10
/Helvetica-Bold@0 SF([1)5 E/F5 10/ZapfDingbats SF(4)A F4(])A/F6 10
/Courier-Narrow@0 SF(#)87 82 Q F3(twice;;)4.5 E F6 4.5(-:\()87 94 S
('a -> 'a\) -> 'a -> 'a = <fun>)-4.5 E(#)87 106 Q F3
(twice \(\(+\)1\) 3;;)4.5 E F6 4.5(-:i)87 118 S(nt = 5)-4.5 E(#)87 130 Q
F3(twice \(fun x -> x - 3\) 5;;)4.5 E F6 4.5(-:i)87 142 S(nt = -1)-4.5 E
F1(11.)72 160 Q F2(Prolog.)2.5 E F1(Gi)5.694 E -.15(ve)-.25 G 3.194(nf)
.15 G .694(acts lik)-3.294 F 3.194(et)-.1 G .694
(he ones presented at the left, de\214ne the rules)-3.194 F F3(father)
3.194 E F1(and)3.194 E F3(mother)3.194 E F1 .695(where the \214rst ar)
3.195 F(gu-)-.18 E .39(ment is the parent and the second ar)87 172 R .39
(gument is the child.)-.18 F -.15(Fo)5.39 G 2.89(rt).15 G .39(he f)-2.89
F .39(acts called)-.1 F F3(parent)2.89 E F1 2.89(,t)C .39(he ar)-2.89 F
.39(guments are, in order)-.18 F F3(parent\( Father, Mother, Child\))87
184 Q F1(.)A F4([2)5 E F5(4)A F4(])A F3
(parents\( henry_vii, elizabeth_of_york, henry_viii\).)87 202 Q
(parents\( henry_viii, catherine_of_aragon, mary_i\).)87 214 Q
(parents\( henry_viii, anne_boleyn, elizabeth_i\).)87 226 Q
(parents\( henry_viii, jane_seymour, edward_vi\).)87 238 Q 4.5(|?)87 250
S 4.5(-f)-4.5 G(ather\( X, henry_viii\).)-4.5 E 4.5(X=h)87 262 S
(enry_vii)-4.5 E 4.5(|?)87 274 S 4.5(-f)-4.5 G(ather\( henry_viii, X\).)
-4.5 E 4.5(X=m)87 286 S(ary_i)-4.5 E 4.5(X=e)87 298 S(lizabeth_i)-4.5 E
4.5(X=e)87 310 S(dward_vi)-4.5 E 4.5(|?)87 322 S 4.5(-m)-4.5 G
(other\( X, elizabeth_i\).)-4.5 E 4.5(X=a)87 334 S(nne_boleyn)-4.5 E 4.5
(|?)87 346 S 4.5(-m)-4.5 G(other\( elizabeth_of_york, X\).)-4.5 E 4.5
(X=h)87 358 S(enry_viii)-4.5 E F1(12. De\214ne)72 376 Q 2.848(af)2.848 G
(unction)-2.848 E F3(oddlen)2.848 E F1 .349
(which returns true if the length of the list is odd and f)2.848 F .349
(alse if it is e)-.1 F -.15(ve)-.25 G 2.849(n. Do).15 F .349(not use an)
2.849 F(y)-.15 E -.2(bu)87 388 S .47(ilt-in library functions.).2 F .47
(Remember that 0 is an e)5.47 F -.15(ve)-.25 G 2.969(nn).15 G(umber)
-2.969 E 5.469(.D)-.55 G 2.969(on)-5.469 G .469(ot use an)-2.969 F 2.969
(yl)-.15 G .469(ength function.)-2.969 F .469(Use tail recur)5.469 F(-)
-.2 E(sion.)87 400 Q(\(a\))95.9 418 Q F2(Sc)5 E(heme.)-.1 E F4([1)5 E F5
(4)A F4(])A F6(>)112 430 Q F3(\(oddlen '\(1 2 3\)\))4.5 E F6(#t)112 442
Q(>)112 454 Q F3(\(oddlen '\(1 2 3 4\)\))4.5 E F6(#f)112 466 Q F1(\(b\))
95.34 484 Q F2(Ocaml.)5 E F4([1)5 E F5(4)A F4(])A F6(#)112 496 Q F3
(oddlen [1;2;3];;)4.5 E F6 4.5(-:b)112 508 S(ool = true)-4.5 E(#)112 520
Q F3(oddlen [1;2;3;4];;)4.5 E F6 4.5(-:b)112 532 S(ool = false)-4.5 E F1
(\(c\))95.9 550 Q F2(Prolog.)5 E F4([1)5 E F5(4)A F4(])A F6 4.5(|?)112
562 S(-)-4.5 E F3(oddlen\([1,2,3]\).)4.5 E F6(true)112 574 Q 4.5(|?)112
586 S(-)-4.5 E F3(oddlen\([1,2,3,4]\).)4.5 E F6(no)112 598 Q F1
(13. De\214ne the function)72 616 Q F3(map)2.5 E F1(.)A(\(a\))95.9 634 Q
F2(Ocaml.)5 E F4([2)5 E F5(4)A F4(])A F6(#)112 646 Q F3(List.map;;)4.5 E
F6 4.5(-:\()112 658 S('a -> 'b\) -> 'a list -> 'b list = <fun>)-4.5 E(#)
112 670 Q F3(List.map \(\(+\)6\) [1;2;3;4];;)4.5 E F6 4.5(-:i)112 682 S
(nt list = [7; 8; 9; 10])-4.5 E F1(\(b\))95.34 700 Q F2(Sc)5 E(heme.)-.1
E F4([2)5 E F5(4)A F4(])A F6(>)112 712 Q F3
(\(map \(lambda \(x\) \(+ x 6\)\) '\(1 2 3 4\)\))4.5 E F6(\(7 8 9 10\))
112 724 Q 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
.4 LW 540 52 72 52 DL 540 54 72 54 DL/F0 10/Times-Bold@0 SF
(CMPS-112 \203 Pr)72 48 Q
(ogramming Languages \203 Spring 2017 \203 Final Exam)-.18 E/F1 10
/Times-Roman@0 SF 2.5(4o)162.95 G 2.5(f5)-2.5 G 1.675(Multiple choice.)
72 70 R 3.275 -.8(To t)6.675 H(he).8 E/F2 10/Times-BoldItalic@0 SF(left)
4.175 E F1 1.675(of each question, write)4.175 F 1.277
(the letter that indicates your answer)72 82 R 6.277(.W)-.55 G(rite)
-6.277 E F2(Z)3.776 E F1 1.276(if you)3.776 F(don')72 94 Q 4.076(tw)-.18
G 1.576(ant to risk a wrong answer)-4.176 F 6.577(.W)-.55 G 1.577
(rong answers)-6.577 F(are w)72 106 Q(orth ne)-.1 E -.05(ga)-.15 G(ti)
.05 E .3 -.15(ve p)-.25 H(oints.).15 E/F3 10/Helvetica-Bold@0 SF([12)5 E
/F4 10/ZapfDingbats SF(4)A F3(])A 289.76 116.5 72 116.5 DL F1(number of)
77 126 Q 7.5<d731>80.72 G(=)-2.5 E/F5 10/Symbol SF(=)43 E/F6 10
/Times-Italic@0 SF(a)3.13 E F1(correct answers)77 138 Q 289.76 142.5 72
142.5 DL(number of)77 152 Q 5<d7bd3d>80.72 G F5(=)38 E F6(b)3.07 E F1
(wrong answers)77 164 Q 289.76 168.5 72 168.5 DL(number of)77 178 Q 7.5
<d730>80.72 G 23(=0)-2.5 G(missing answers)77 190 Q 289.76 194.5 72
194.5 DL(column total)77 204 Q(12)51.82 E F5(=)81.78 E F6(c)3 E(c)77.2
216 Q F5(=)3.11 E F1(max\()2.8 E F6(a).33 E F5(-)2.46 E F6(b)2.47 E F1
1.7(,0).23 G(\))-1.7 E 289.76 220.5 72 220.5 DL 289.76 116.5 289.76
220.5 DL 235.38 116.5 235.38 220.5 DL 194.1 116.5 194.1 220.5 DL 154.6
116.5 154.6 220.5 DL 72 116.5 72 220.5 DL 2.5(1. Ho)79.5 242 R 2.733(wm)
-.25 G .232(uch stack space is tak)-2.733 F .232(en up by the follo)-.1
F(w-)-.25 E(ing function)92 254 Q(?)1.666 E/F7 10/Courier-Narrow-Bold@0
SF(let rec fib n)92 266 Q(if n <= 1 then n)110 278 Q
(else fib \(n - 1\) + fib \(n - 2\))110 290 Q F1(\(A\))93.12 302 Q F6(O)
4.9 E F1(\(1\)).27 E(\(B\))93.67 314 Q F6(O)4.9 E F1(\(log).27 E/F8 7
/Times-Roman@0 SF(2)2.53 I F6(n)2.56 -2.53 M F1(\)).24 E(\(C\))93.67 326
Q F6(O)4.9 E F1(\().27 E F6(n).36 E F1(\)).24 E(\(D\))93.12 338 Q F6(O)
4.9 E F1(\(2).27 E/F9 7/Times-Italic@0 SF(n).252 -4.2 M F1(\)).668 4.2 M
2.5(2. Ho)79.5 356 R 3.631(wm)-.25 G 1.131(uch stack space is tak)-3.631
F 1.131(en up by the func-)-.1 F(tion)92 368 Q F7(fib)2.5 E F1
(on the \214rst page of this e)2.5 E -.834(xam ?)-.15 F(\(A\))93.12 380
Q F6(O)4.9 E F1(\(1\)).27 E(\(B\))93.67 392 Q F6(O)4.9 E F1(\(log).27 E
F8(2)2.53 I F6(n)2.56 -2.53 M F1(\)).24 E(\(C\))93.67 404 Q F6(O)4.9 E
F1(\().27 E F6(n).36 E F1(\)).24 E(\(D\))93.12 416 Q F6(O)4.9 E F1(\(2)
.27 E F9(n).252 -4.2 M F1(\)).668 4.2 M 2.5(3. Ho)79.5 434 R 4.17(ww)
-.25 G(ill)-4.17 E F7(Ocaml)4.17 E F1 1.67(respond to the follo)4.17 F
1.67(wing state-)-.25 F -.834(ment ?)92 446 R F7(\(+\);;)92 458 Q F1
(\(A\))93.12 470 Q F7 4.5(-:i)5 G(nt * int * int = <fun>)-4.5 E F1
(\(B\))93.67 482 Q F7 4.5(-:i)5 G(nt * int -> int = <fun>)-4.5 E F1
(\(C\))93.67 494 Q F7 4.5(-:i)5 G(nt -> int * int = <fun>)-4.5 E F1
(\(D\))93.12 506 Q F7 4.5(-:i)5 G(nt -> int -> int = <fun>)-4.5 E F1 2.5
(4. Which)79.5 524 R 1.041(of the follo)3.541 F 1.042
(wing data structures is incon-)-.25 F
(sistent with functional programming style)92 536 Q(?)1.666 E 2.5
(\(A\) list)93.12 548 R 2.5(\(B\) stack)93.67 560 R 2.5(\(C\) tree)93.67
572 R 2.5(\(D\) v)93.12 584 R(ector)-.15 E 2.5(5. A)79.5 602 R
(closure is)2.5 E(:)1.666 E 2.5(\(A\) A)93.12 614 R .166
(special \214eld of a structure or class used to)2.666 F 2.792
(point at a base class when implementing)112 626 R
(shared multiple inheritance.)112 638 Q 2.5(\(B\) A)93.67 650 R .53
(special type declaration in Ocaml used to)3.03 F
(distinguish sum types from product types.)112 662 Q 2.5(\(C\) A)93.67
674 R 1.259(structure on the heap, used to hold v)3.758 F(ari-)-.25 E
1.225(ables of an outer function when referenced)112 686 R
(by an inner function.)112 698 Q 2.5(\(D\) A)93.12 710 R .292
(table used to dynamically dispatch virtual)2.791 F
(functions in an object-oriented en)112 722 Q(vironment.)-.4 E 2.5
(6. Ho)329.1 76 R 2.5(wm)-.25 G(uch stack space is used by)-2.5 E(:)
1.666 E F7(\(define \(fib n\))341.6 88 Q(\(if \(<= n 1\) n)359.6 100 Q
(\(+ \(fib \(- n 1\)\) \(fib \(- n 2\)\)\)\)\))377.6 112 Q F1(\(A\))
342.72 124 Q F6(O)4.9 E F1(\(1\)).27 E(\(B\))343.27 136 Q F6(O)4.9 E F1
(\(log).27 E F8(2)2.53 I F6(n)2.56 -2.53 M F1(\)).24 E(\(C\))343.27 148
Q F6(O)4.9 E F1(\().27 E F6(n).36 E F1(\)).24 E(\(D\))342.72 160 Q F6(O)
4.9 E F1(\(2).27 E F9(n).252 -4.2 M F1(\)).668 4.2 M 2.5(7. What)329.1
178 R(is)2.5 E F7(\(3 4\))2.5 E F1(?)1.666 E(\(A\))342.72 190 Q F7
(\(caar '\(1 2 3 4\)\))5 E F1(\(B\))343.27 202 Q F7
(\(cadr '\(1 2 3 4\)\))5 E F1(\(C\))343.27 214 Q F7
(\(cdar '\(1 2 3 4\)\))5 E F1(\(D\))342.72 226 Q F7
(\(cddr '\(1 2 3 4\)\))5 E F1 2.5(8. What)329.1 244 R(is)2.5 E F7(5)2.5
E F1(in Smalltalk)2.5 E(?)1.666 E(\(A\))342.72 256 Q F7
(\(1 + 4\) value.)5 E F1(\(B\))343.27 268 Q F7(<1 + 4> value.)5 E F1
(\(C\))343.27 280 Q F7([1 + 4] value.)5 E F1(\(D\))342.72 292 Q F7
({1 + 4} value.)5 E F1 2.5(9. In)329.1 310 R(Smalltalk)2.5 E F7(2*3+4*5)
2.5 E F1 -.834(is :)2.5 F(\(A\))342.72 322 Q F7(\(\(2*3\)+4\)*5)5 E F1
(\(B\))343.27 334 Q F7(\(2*3\)+\(4*5\))5 E F1(\(C\))343.27 346 Q F7
(2*\(\(3+4\)*5\))5 E F1(\(D\))342.72 358 Q F7(2*\(3+\(4*5\)\))5 E F1 2.5
(10. In)324.1 376 R(Prolog and Scheme, type checking is)2.5 E(:)1.666 E
2.5(\(A\) strong)342.72 388 R(and dynamic)2.5 E 2.5(\(B\) strong)343.27
400 R(and static)2.5 E 2.5(\(C\) weak)343.27 412 R(and dynamic)2.5 E 2.5
(\(D\) weak)342.72 424 R(and static)2.5 E 2.5(11. What)324.1 442 R
(is 24)2.5 E(?)1.666 E(\(A\))342.72 454 Q F7(\(apply * '\(1 2 3 4\)\))5
E F1(\(B\))343.27 466 Q F7(\(map * '\(1 2 3 4\)\))5 E F1(\(C\))343.27
478 Q F7(\(cons * '\(1 2 3 4\)\))5 E F1(\(D\))342.72 490 Q F7
(\(list * '\(1 2 3 4\)\))5 E F1 2.5(12. `)324.1 508 R(`Go T)-.74 E 2.5
(oS)-.8 G(tatement Considered Harmful')-2.5 E(')-.74 E 2.5
(\(A\) Corrado)342.72 520 R(B\366hm & Giuseppe Jacopini)2.5 E 2.5
(\(B\) Donald)343.27 532 R(E. Knuth)2.5 E 2.5(\(C\) Edsger)343.27 544 R
1.84 -.92(W. D)2.5 H(ijkstra).92 E 2.5(\(D\) Niklaus)342.72 556 R -.4
(Wi)2.5 G(rth).4 E F8(FOR)335.6 581 Q .044(TRAN, the inf)-.42 F .044
(antile disorder)-.07 F 1.794(,b)-.28 G 1.794(yn)-1.794 G .394 -.175
(ow n)-1.794 H .043(early 20 years old, is hope-).175 F .246
(lessly inadequate for whate)326.6 588 R -.105(ve)-.175 G 1.996(rc).105
G .246(omputer application you ha)-1.996 F .456 -.105(ve i)-.14 H 1.996
(nm).105 G .246(ind to-)-1.996 F -.584(day :)326.6 595 R(it is no)3.5 E
1.75(wt)-.175 G(oo clumsy)-1.75 E 1.75(,t)-.455 G(oo risk)-1.75 E .91
-.455(y, a)-.105 H(nd too e).455 E(xpensi)-.105 E .21 -.105(ve t)-.175 H
1.75(ou).105 G(se.)-1.75 E .284(PL/I, the f)335.6 602 R .284
(atal disease, belongs more to the problem set than to the so-)-.07 F
(lution set.)326.6 609 Q .185(It is practically impossible to teach goo\
d programming to students that)335.6 616 R(ha)326.6 623 Q .698 -.105
(ve h)-.14 H .488(ad a prior e).105 F .487(xposure to B)-.105 F -.584
(ASIC :)-.245 F .487(as potential programmers the)3.987 F 2.237(ya)-.105
G(re)-2.237 E(mentally mutilated be)326.6 630 Q(yond hope of re)-.105 E
(generation.)-.105 E .731
(The use of COBOL cripples the mind; its teaching should, therefore,)
335.6 637 R(be re)326.6 644 Q -.035(ga)-.105 G(rded as a criminal of)
.035 E(fence.)-.175 E .568(APL is a mistak)335.6 651 R .568
(e, carried through to perfection.)-.07 F .567(It is the language of)
4.067 F .743(the future for the programming techniques of the past)326.6
658 R 4.244(:i)1.166 G 2.494(tc)-4.244 G .744(reates a ne)-2.494 F(w)
-.175 E(generation of coding b)326.6 665 Q(ums.)-.14 E .26
(In the good old days ph)335.6 672 R .259(ysicists repeated each other')
-.035 F 2.009(se)-.385 G .259(xperiments, just)-2.114 F .808
(to be sure.)326.6 679 R -.56(To)4.308 G .808(day the).56 F 2.558(ys)
-.105 G .808(tick to FOR)-2.558 F .809(TRAN, so that the)-.42 F 2.559
(yc)-.105 G .809(an share each)-2.559 F(other')326.6 686 Q 1.75(sp)-.385
G(rograms, b)-1.75 E(ugs included.)-.14 E 1.75<8a45>326.6 699 S -.584
(WD498 :)-1.75 F -.518(``)3.5 G(Ho).518 E 1.75(wd)-.175 G 1.75(ow)-1.75
G 1.75(et)-1.75 G(ell truths that might hurt)-1.75 E(?')1.166 E(')-.518
E(prof. dr)326.6 706 Q 1.75(.E)-.385 G(dsger W)-1.75 E 1.75(.D)-.644 G
(ijkstra, 1975.)-1.75 E(http://www)326.6 713 Q(.cs.ute)-.455 E
(xas.edu/users/EWD/transcriptions/EWD04xx/)-.105 E 540 719 321.6 719 DL
540 570.5 540 719 DL 321.6 570.5 540 570.5 DL 321.6 719 321.6 570.5 DL 0
Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
.4 LW 540 52 72 52 DL 540 54 72 54 DL/F0 10/Times-Bold@0 SF
(CMPS-112 \203 Pr)72 48 Q
(ogramming Languages \203 Spring 2017 \203 Final Exam)-.18 E/F1 10
/Times-Roman@0 SF 2.5(5o)162.95 G 2.5(f5)-2.5 G 1.675(Multiple choice.)
72 70 R 3.275 -.8(To t)6.675 H(he).8 E/F2 10/Times-BoldItalic@0 SF(left)
4.175 E F1 1.675(of each question, write)4.175 F 1.276
(the letter that indicates your answer)72 82 R 6.277(.W)-.55 G(rite)
-6.277 E F2(Z)3.777 E F1 1.277(if you)3.777 F(don')72 94 Q 4.077(tw)-.18
G 1.576(ant to risk a wrong answer)-4.177 F 6.576(.W)-.55 G 1.576
(rong answers)-6.576 F(are w)72 106 Q(orth ne)-.1 E -.05(ga)-.15 G(ti)
.05 E .3 -.15(ve p)-.25 H(oints.).15 E/F3 10/Helvetica-Bold@0 SF([12)5 E
/F4 10/ZapfDingbats SF(4)A F3(])A 289.76 116.5 72 116.5 DL F1(number of)
77 126 Q 7.5<d731>80.72 G(=)-2.5 E/F5 10/Symbol SF(=)43 E/F6 10
/Times-Italic@0 SF(a)3.13 E F1(correct answers)77 138 Q 289.76 142.5 72
142.5 DL(number of)77 152 Q 5<d7bd3d>80.72 G F5(=)38 E F6(b)3.07 E F1
(wrong answers)77 164 Q 289.76 168.5 72 168.5 DL(number of)77 178 Q 7.5
<d730>80.72 G 23(=0)-2.5 G(missing answers)77 190 Q 289.76 194.5 72
194.5 DL(column total)77 204 Q(12)51.82 E F5(=)81.78 E F6(c)3 E(c)77.2
216 Q F5(=)3.11 E F1(max\()2.8 E F6(a).33 E F5(-)2.46 E F6(b)2.47 E F1
1.7(,0).23 G(\))-1.7 E 289.76 220.5 72 220.5 DL 289.76 116.5 289.76
220.5 DL 235.38 116.5 235.38 220.5 DL 194.1 116.5 194.1 220.5 DL 154.6
116.5 154.6 220.5 DL 72 116.5 72 220.5 DL 2.5(1. What)79.5 242 R 1.053
(does the pure functional language Hask)3.553 F(ell)-.1 E
(use to maintain state)92 254 Q(?)1.666 E 2.5(\(A\) closure)93.12 266 R
2.5(\(B\) d\346mon)93.67 278 R 2.5(\(C\) monad)93.67 290 R 2.5
(\(D\) thunk)93.12 302 R 2.5(2. Which)79.5 320 R 2.27
(language permits e)4.77 F 2.27(xtension, addition of)-.15 F(ne)92 332 Q
2.5(wm)-.25 G(ethods to a class, at runtime)-2.5 E(?)1.666 E 2.5
(\(A\) C)93.12 344 R 2.5(\(B\) C++)93.67 356 R 2.5(\(C\) Ja)93.67 368 R
-.25(va)-.2 G 2.5(\(D\) Smalltalk)93.12 380 R 2.5(3. Perl.)79.5 398 R
.632(What re)5.632 F(ge)-.15 E 3.132(xw)-.15 G .633
(ill match one or more occur)-3.132 F(-)-.2 E(rences of the letter)92
410 Q/F7 10/Courier-Narrow-Bold@0 SF(a)2.5 E F1(?)1.666 E(\(A\))93.12
422 Q F7([a])5 E F1(\(B\))93.67 434 Q F7(a*)5 E F1(\(C\))93.67 446 Q F7
(a+)5 E F1(\(D\))93.12 458 Q F7(a?)5 E F1 2.5(4. Perl.)79.5 476 R 1.115
(What will substitute the v)6.115 F 1.115(alue of the v)-.25 F(ari-)-.25
E(able)92 488 Q F7($foo)2.5 E F1(into the string assigned to)2.5 E F7
($x)2.5 E F1(?)1.666 E(\(A\))93.12 500 Q F7($x = '$foo\\n';)5 E F1
(\(B\))93.67 512 Q F7($x = <$foo\\n>;)5 E F1(\(C\))93.67 524 Q F7
($x = "$foo\\n";)5 E F1(\(D\))93.12 536 Q F7($x = `$foo\\n`;)5 E F1 2.5
(5. What)79.5 554 R 1.061(function is called immediately after)3.561 F
F7(d\(\))3.562 E F1(if)3.562 E F7(d\(\))92 566 Q F1(is true)2.5 E(?)
1.666 E F7(for \(a\(\); b\(\); c\(\)\){)92 578 Q(if \(d\(\)\) continue;)
105.5 590 Q(e\(\);)105.5 602 Q(if \(f\(\)\) break;)105.5 614 Q(g\(\);)
105.5 626 Q(})92 638 Q(h\(\);)92 650 Q F1(\(A\))93.12 662 Q F7(b\(\))5 E
F1(\(B\))93.67 674 Q F7(c\(\))5 E F1(\(C\))93.67 686 Q F7(e\(\))5 E F1
(\(D\))93.12 698 Q F7(h\(\))5 E F1 2.5(6. Ocaml.)329.1 76 R F7(List.hd)5
E F1(\(A\))342.72 88 Q F7('a -> 'a)5 E F1(\(B\))343.27 100 Q F7
('a -> 'a list)5 E F1(\(C\))343.27 112 Q F7('a list -> 'a)5 E F1(\(D\))
342.72 124 Q F7('a list -> 'a list)5 E F1 2.5(7. What)329.1 142 R
(kind of polymorphism is e)2.5 E(xhibited by)-.15 E(:)1.666 E F7
(class foo {)341.6 154 Q F6(...)4.73 E F7(})4.5 E
(class bar extends foo {)341.6 166 Q F6(...)4.73 E F7(})4.5 E F1 2.5
(\(A\) ad)342.72 178 R(hoc con)2.5 E -.15(ve)-.4 G(rsion).15 E 2.5
(\(B\) ad)343.27 190 R(hoc o)2.5 E -.15(ve)-.15 G(rloading).15 E 2.5
(\(C\) uni)343.27 202 R -.15(ve)-.25 G(rsal inclusion).15 E 2.5
(\(D\) uni)342.72 214 R -.15(ve)-.25 G(rsal parametric).15 E 2.5
(8. What)329.1 232 R(kind of polymorphism is e)2.5 E(xhibited by)-.15 E
(:)1.666 E F7(void foo \(int\);)341.6 244 Q(void foo \(string\);)341.6
256 Q F1 2.5(\(A\) ad)342.72 268 R(hoc con)2.5 E -.15(ve)-.4 G(rsion).15
E 2.5(\(B\) ad)343.27 280 R(hoc o)2.5 E -.15(ve)-.15 G(rloading).15 E
2.5(\(C\) uni)343.27 292 R -.15(ve)-.25 G(rsal inclusion).15 E 2.5
(\(D\) uni)342.72 304 R -.15(ve)-.25 G(rsal parametric).15 E 2.5
(9. What)329.1 322 R .443(kind of polymorphism is e)2.943 F .443
(xhibited by C++)-.15 F(templates and Ja)341.6 334 Q .5 -.25(va g)-.2 H
-.834(enerics ?).25 F 2.5(\(A\) ad)342.72 346 R(hoc con)2.5 E -.15(ve)
-.4 G(rsion).15 E 2.5(\(B\) ad)343.27 358 R(hoc o)2.5 E -.15(ve)-.15 G
(rloading).15 E 2.5(\(C\) uni)343.27 370 R -.15(ve)-.25 G
(rsal inclusion).15 E 2.5(\(D\) uni)342.72 382 R -.15(ve)-.25 G
(rsal parametric).15 E 2.5(10. What)324.1 400 R
(kind of polymorphism is e)2.5 E(xhibited by)-.15 E(:)1.666 E F7
(void foo \(double\);)341.6 412 Q(foo \(3\);)341.6 424 Q F1 2.5
(\(A\) ad)342.72 436 R(hoc con)2.5 E -.15(ve)-.4 G(rsion).15 E 2.5
(\(B\) ad)343.27 448 R(hoc o)2.5 E -.15(ve)-.15 G(rloading).15 E 2.5
(\(C\) uni)343.27 460 R -.15(ve)-.25 G(rsal inclusion).15 E 2.5
(\(D\) uni)342.72 472 R -.15(ve)-.25 G(rsal parametric).15 E 2.5(11. In)
324.1 490 R(Ja)3.417 E 1.417 -.25(va o)-.2 H 3.417(rC).25 G .918
(++, which statement can cause con-)-3.417 F .659
(trol to pass from the current function to the call-)341.6 502 R .027
(ing function, or perhaps the caller of the caller)341.6 514 R 2.527(,o)
-.4 G(r)-2.527 E .84(perhaps e)341.6 526 R -.15(ve)-.25 G 3.34(na).15 G
.84(ll the w)-3.34 F .84(ay back to the main func-)-.1 F -.834(tion ?)
341.6 538 R(\(A\))342.72 550 Q F7(break)5 E F1(\(B\))343.27 562 Q F7
(continue)5 E F1(\(C\))343.27 574 Q F7(return)5 E F1(\(D\))342.72 586 Q
F7(throw)5 E F1 2.5(12. The)324.1 604 R 1.102(syntax of what language w)
3.602 F 1.102(as the \214rst to be)-.1 F(de\214ned by Backus-Naur F)
341.6 616 Q(ormat \(BNF\))-.15 E(?)1.666 E 2.5(\(A\) Algol)342.72 628 R
(60)2.5 E 2.5(\(B\) Basic)343.27 640 R 2.5(\(C\) Cobol)343.27 652 R 2.5
(\(D\) F)342.72 664 R(ortran)-.15 E 0 Cg EP
%%Trailer
end
%%EOF
